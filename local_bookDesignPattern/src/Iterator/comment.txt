Iteratorは一言でいうと、「for文のiのこと」
for文で、
最初の要素から始める、インクリメントして次の要素にいく、最後の要素で終わる
というiの要素を抽象化し、一般化したものをデザインパターンではiteratorと呼んでいる。

拡張for文がこのパターンにあたり、言語によっては標準搭載されているため、
拡張for文がどのように実装されているか、という教養的な側面が強いように思える。
（どこかで使える？？？）

下記のUMLの場合、Iteratorパターンを使う時には、
BookShelfのIterator()を呼び出して、BookShelfIteratorを生成し、、
hasNext()とnext()を組み合わせて要素を順に呼び出す。

PlantUML:
@startuml
title IterableとIteratorはjava.utilに存在する\n(importしてimplementする)
interface Iterable<Book>{
	iterator()
}
note top:"able"で\n"Iterator"を作る
interface Iterator<Book> {
	hasNext()
	next()
}

together {
class BookShelf implements Iterable

class BookShelfIterator implements Iterator
}

class Book

Iterable -right-> Iterator:Creates

BookShelf <-o BookShelfIterator
BookShelf o-down-> Book

@enduml
